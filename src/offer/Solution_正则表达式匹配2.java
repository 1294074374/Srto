
/**
 * 题目描述
请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面
的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。
例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配
 */
package offer;

public class Solution_正则表达式匹配2 {
	public boolean match(char[] str, char[] pattern) {
		// 测试模式或者匹配模式 二者其中有一个为空则返回false
		if (str.length == 0 || pattern.length == 0) {
			return false;
		}
		int strIndex = 0;
		int patternIndex = 0;
		return matchCore(str, strIndex, pattern, patternIndex);
	}

	public boolean matchCore(char[] str, int strIndex, char[] pattern, int patternIndex) {
		// 匹配成功 返回true
		if (strIndex == str.length && patternIndex == pattern.length) {
			return true;
		}
		// 当 模式还没匹配完了 但匹配模式已经到结尾了 返回false
		if (strIndex != str.length && patternIndex == pattern.length) {
			return false;
		}
		// 模式第2个是*，且字符串第1个跟模式第1个匹配,分3种匹配模式；如不匹配，模式后移2位
		if (patternIndex + 1 < pattern.length && pattern[patternIndex + 1] == '*') {
			if ((str.length != strIndex && pattern[patternIndex] == str[strIndex])
					|| (str.length != strIndex && pattern[patternIndex] == '.')) {
				return matchCore(str, strIndex, pattern, patternIndex + 2)// 模式后移2，视为x*匹配0个字符
						|| matchCore(str, strIndex + 1, pattern, patternIndex + 2)// 视为模式匹配1个字符
						|| matchCore(str, strIndex + 1, pattern, patternIndex);// *匹配1个，再匹配str中的下一个
			} else {
				matchCore(str, strIndex, pattern, patternIndex + 2);
			}
		} 
		// 模式第2个不是*，且字符串第1个跟模式第1个匹配，则都后移1位，否则直接返回false
		if ((strIndex != str.length && pattern[patternIndex] == str[strIndex])
				|| (pattern[patternIndex] == '.' && strIndex != str.length)) {
			return matchCore(str, strIndex + 1, pattern, patternIndex + 1);
		}
		return false;
	}
}
